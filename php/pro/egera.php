<?php

namespace ccxt\pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use React\Async;

class egera extends \ccxt\async\egera {

    use ClientTrait;

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'urls' => array(
                'api' => array(
                    'ws' => 'ws://n1.ws.egera.com',
                ),
            ),
            'has' => array(
                'ws' => true,
                'watchBalance' => true,
            ),
        ));
    }

    public function watch_balance() {
        return Async\async(function ()  {
            Async\await($this->load_markets());
            $url = $this->urls['api']['ws'];
            // // $requestId = $this->requestId ($url);
            // // $watchOrderBookRate = $this->safe_string($this->options, 'watchOrderBookRate', '100');
            $message = array(
                'op' => 'subscribe',
                'headers' => array( 'id' => $this->uid, 'token' => $this->secret ),
                'args' => array( 'orderbooks:all', 'tickers:all' ),
            );
            $messageHash = 'balances:*';
            // // 1. Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth.
            return Async\await($this->watch($url, $messageHash, $message));
        }) ();
    }

    public function handle_message($client, $message) {
        var_dump ('--', $client, $message);
        // if ($this->handleErrorMessage ($client, $message)) {
        //     $type = $this->safe_string($message, 'type');
        //     $methods = array(
        //         // 'heartbeat' => $this->handleHeartbeat,
        //         'welcome' => $this->handleSystemStatus,
        //         'ack' => $this->handleSubscriptionStatus,
        //         'message' => $this->handleSubject,
        //         'pong' => $this->handlePong,
        //     );
        //     $method = $this->safe_value($methods, $type);
        //     if ($method === null) {
        //         return $message;
        //     } else {
        //         return $method($client, $message);
        //     }
        // }
    }
}
