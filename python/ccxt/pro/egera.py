# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.pro.base.exchange import Exchange
import ccxt.async_support


class egera(Exchange, ccxt.async_support.egera):

    def describe(self):
        return self.deep_extend(super(egera, self).describe(), {
            'urls': {
                'api': {
                    'ws': 'ws://n1.ws.egera.com',
                },
            },
            'has': {
                'ws': True,
                'watchBalance': True,
            },
        })

    async def watch_balance(self):
        await self.load_markets()
        url = self.urls['api']['ws']
        #  # requestId = self.requestId(url)
        #  # watchOrderBookRate = self.safe_string(self.options, 'watchOrderBookRate', '100')
        message = {
            'op': 'subscribe',
            'headers': {'id': self.uid, 'token': self.secret},
            'args': ['orderbooks:all', 'tickers:all'],
        }
        messageHash = 'balances:*'
        #  # 1. Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth.
        return await self.watch(url, messageHash, message)

    def handle_message(self, client, message):
        print('--', client, message)
        # if self.handleErrorMessage(client, message):
        #     type = self.safe_string(message, 'type')
        #     methods = {
        #         # 'heartbeat': self.handleHeartbeat,
        #         'welcome': self.handleSystemStatus,
        #         'ack': self.handleSubscriptionStatus,
        #         'message': self.handleSubject,
        #         'pong': self.handlePong,
        #     }
        #     method = self.safe_value(methods, type)
        #     if method is None:
        #         return message
        #     else:
        #         return method(client, message)
        #     }
        # }
